{"version":3,"file":"iotize-ng-com.js","sources":["ng://iotize-ng-com/ble/ble.service.ts","ng://iotize-ng-com/tap/tap.service.ts","ng://iotize-ng-com/nfc/nfc.service.ts","ng://iotize-ng-com/iotize-ng-com.module.ts","ng://iotize-ng-com/iotize-ng-com.ts"],"sourcesContent":["import { Observable, Subscription, PartialObserver, BehaviorSubject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { BLEComProtocol, BLEScanner } from '@iotize/cordova-plugin-iotize-ble';\r\nimport { ComProtocol, ComProtocolOptions } from '@iotize/device-client.js/protocol/api';\r\nimport { IoTizeComService, DiscoveredDeviceType } from \"../com-service-interface\";\r\nimport { distinct } from \"rxjs/operators\";\r\n\r\ndeclare var iotizeBLE: any;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * This class gives access to the IoTize BLE cordova plugin within an injectable angular service\r\n */\r\nexport class IoTizeBle implements IoTizeComService {\r\n\r\n  private scanner = new BLEScanner();\r\n  private devicesArray$: BehaviorSubject<DiscoveredDeviceType[]>;\r\n  private _devicesArray : DiscoveredDeviceType[] = [];\r\n  private scannerSubscription: Subscription;\r\n  /**\r\n   * @returns {boolean} BLE scanner status\r\n   */\r\n  get isScanning() {\r\n    return this.scanner.isScanning;\r\n  }\r\n  constructor() {\r\n    this.initObservables();\r\n  }\r\n\r\n  private initObservables() {\r\n    this.devicesArray$ = new BehaviorSubject<DiscoveredDeviceType[]>([]);\r\n    const observer: PartialObserver<DiscoveredDeviceType> = {\r\n      next: val => {\r\n        this._devicesArray.push(val);\r\n        this.devicesArray$.next(this._devicesArray);\r\n      }\r\n    }\r\n    this.scannerSubscription = this.devices().pipe(\r\n      distinct( _ => _.address) // filtering by address\r\n    ).subscribe(observer)\r\n  }\r\n\r\n  startScan(): Observable<DiscoveredDeviceType> {\r\n    this.scanner.start({});\r\n    return this.devices().pipe(\r\n      distinct( _ => _.address)\r\n    );\r\n  }\r\n\r\n  checkAvailable(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      iotizeBLE.checkAvailable((val) => {\r\n        console.log(val);\r\n        val ? resolve() : reject('BlueTooth is not on and ready to use');\r\n      },\r\n        (err) => {\r\n          console.error(err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that triggers each time a new tap is discovered\r\n   * @return {Observable<DiscoveredDeviceType>}\r\n   */\r\n\r\n  devices(): Observable<DiscoveredDeviceType> {\r\n    return this.scanner.devicesObservable();\r\n  }\r\n\r\n  devicesArray(): Observable<DiscoveredDeviceType[]> {\r\n    return this.devicesArray$.asObservable();\r\n  }\r\n\r\n  clearDevices(except: DiscoveredDeviceType[] = []) {\r\n    this._devicesArray = except;\r\n    this.scannerSubscription.unsubscribe();\r\n    this.initObservables();\r\n  }\r\n\r\n  stopScan() {\r\n    console.log('Stop Scanning ...');\r\n      this.scanner.stop();\r\n    }\r\n\r\n  getProtocol(device: DiscoveredDeviceType | string, options?: ComProtocolOptions): ComProtocol {\r\n    const deviceAddress = (typeof device !== 'string') ? device.address : device;\r\n    return new BLEComProtocol(deviceAddress, options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Tap, SessionState } from '@iotize/device-client.js/device';\r\nimport { ComProtocol } from '@iotize/device-client.js/protocol/api';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IoTizeTap {\r\n\r\n  isReady = false;\r\n  tap: Tap;\r\n  connectionPromise?: Promise<any> = null;\r\n  session?: SessionState = null;\r\n  private sessionSubscription?: Subscription = null;\r\n\r\n  constructor() { }\r\n  /**\r\n   * Initialize a communication with the given protocol, creating a new .\r\n   * It connects to the Tap and gets the current session state\r\n   * @returns promise resolved on connection success\r\n   * @throws On connection failure, promise is rejected\r\n   * @param protocol Communication protocol, using BLE,NFC or WiFi, attached to an IoTize Tap\r\n   */\r\n  async init(protocol: ComProtocol): Promise<void> {\r\n    this.isReady = false;\r\n    try {\r\n      this.tap = Tap.create();\r\n      this.sessionSubscription = this.sessionState()\r\n        .subscribe(session => {\r\n          console.log(\"session changed\");\r\n          this.session = session;\r\n        });\r\n      console.log('tap created');\r\n      this.connectionPromise = this.connect(protocol);\r\n      console.log('waiting for connection promise');\r\n      await this.connectionPromise;\r\n      console.log('Connected');\r\n      this.isReady = true;\r\n    } catch (error) {\r\n      console.error('init failed');\r\n      console.error(error);\r\n      this.isReady = false;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Connect with the given protocol\r\n   * @param protocol Communication protocol, using BLE,NFC or WiFi, attached to an IoTize Tap\r\n   */\r\n\r\n  private connect(protocol: ComProtocol): Promise<void> {\r\n    return this.tap.connect(protocol);\r\n  }\r\n\r\n  /**\r\n   * Disconnects from the current tap\r\n   */\r\n  async disconnect(): Promise<void> {\r\n    try {\r\n      this.isReady = false;\r\n      await this.tap.disconnect();\r\n      this.clear();\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw (error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Promise<string> on the current Tap serial number\r\n   */\r\n  async getSerialNumber(): Promise<string> {\r\n    return (await this.tap.service.device.getSerialNumber()).body();\r\n  }\r\n\r\n  /**\r\n   * Clears IotizeTap. Sets isReady to false\r\n   */\r\n  clear() {\r\n    this.isReady = false;\r\n    if (this.sessionSubscription) {\r\n      this.sessionSubscription.unsubscribe();\r\n    }\r\n    this.tap = null;\r\n  }\r\n\r\n  /**\r\n   * Logs on the current Tap with the given credentials, and refresh session state\r\n   * @param user\r\n   * @param password\r\n   * @returns true on login success\r\n   */\r\n  async login(user: string, password: string): Promise<boolean> {\r\n    try {\r\n      console.log('trying to log as ', user);\r\n      const logSuccess = await this.tap.login(user, password);\r\n      return logSuccess;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n /**\r\n  */\r\n  async logout(): Promise<boolean> {\r\n    try {\r\n      await this.tap.logout();\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    try {\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * retrieves session state from the current Tap [see device-client.js SessionState](http://developer.iotize.com/reference/typedoc/iotize-device-client.js/0.0.1-alpha.64/interfaces/_device_iotize_device_.sessionstate.html)\r\n   */\r\n\r\n  sessionState(): Observable<SessionState> {\r\n    return this.tap.sessionState;\r\n  }\r\n\r\n  sessionStateForceUpdate() {\r\n    this.tap.refreshSessionState();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NFC, NdefEvent } from \"@ionic-native/nfc/ngx\";\r\nimport { IoTizeComService, DiscoveredDeviceType } from \"../com-service-interface\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\"\r\nimport { ComProtocol } from '@iotize/device-client.js/protocol/api';\r\nimport { NFCComProtocol } from '@iotize/device-com-nfc.cordova'\r\nimport { Platform } from '@ionic/angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IoTizeNfc implements IoTizeComService {\r\n\r\n  constructor(public nfc: NFC,\r\n    private platform: Platform) { }\r\n\r\n  startScan(): Observable<DiscoveredDeviceType> {\r\n    return this.nfc.addNdefListener(() => {\r\n      console.log('NFC listener ON')\r\n      if (this.platform.is('ios')) {\r\n        this.nfc.beginSession();\r\n      }\r\n    },\r\n      (error) => {\r\n        console.error('NFC listener didn\\'t start: ', error)\r\n      }).pipe(\r\n        map(ndef => this.ndefToDiscoveredDevice(ndef))\r\n      );\r\n  }\r\n\r\n  checkAvailable(): Promise<void> {\r\n    return new Promise<void>(async (resolve, reject) => {\r\n      try {\r\n        await this.nfc.enabled();\r\n        resolve();\r\n      } catch (error) {\r\n        this.logError(error);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n  stopScan(): Promise<void> {\r\n    return; // no specific way to stop scan\r\n  }\r\n  getProtocol(): ComProtocol {\r\n    return new NFCComProtocol();\r\n  }\r\n\r\n  logError(error) {\r\n    console.error('[IoTizeNFC] ERROR: ' + error.message ? error.message : error);\r\n  }\r\n\r\n  devicesArray(): Observable<DiscoveredDeviceType[]> {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  clearDevices(): void {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  private ndefToDiscoveredDevice(ndef: NdefEvent): DiscoveredDeviceType {\r\n    console.log(ndef);\r\n    let message = ndef.tag.ndefMessage;\r\n    const appName = String.fromCharCode(...message[3].payload);\r\n    const macAddress = this.convertBytesToBLEAddress(message[2].payload);\r\n    const device: DiscoveredDeviceType = {\r\n      name: appName,\r\n      address: macAddress\r\n    };\r\n    console.log(device);\r\n    return device;\r\n  }\r\n\r\n  private convertBytesToBLEAddress(bytes: number[]): string {\r\n    return bytes.slice(1)\r\n      .map(byte => {\r\n        if (byte < 0) {\r\n          byte += 256;\r\n        }\r\n        let byteString = '0' + byte.toString(16).toUpperCase();\r\n        byteString = byteString.slice(-2);\r\n        return byteString;\r\n      })\r\n      .reverse()\r\n      .join(':')\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IoTizeBle } from './ble/ble.service';\r\nimport { IoTizeTap } from './tap/tap.service';\r\nimport { IoTizeNfc } from './nfc/nfc.service';\r\nimport { NFC } from '@ionic-native/nfc/ngx';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    IoTizeBle,\r\n    IoTizeNfc,\r\n    IoTizeTap,\r\n    NFC\r\n  ]\r\n})\r\nexport class IotizeNgComModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["NFC"],"mappings":"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"}